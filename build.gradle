buildscript {
    repositories {
        mavenLocal()
        maven {
            url nexus_group_url
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
      classpath "com.diffplug.spotless:spotless-plugin-gradle:3.6.0"
    }
}

plugins{
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: "jacoco"

group 'com.remondis'

version PROJECT_VERSION

// Im CI-Build wird die Build-Nummer an die Versionsnummer angeh√§ngt, wenn der Build nicht im
// master Branch stattfindet.
def jobId = System.env['CI_JOB_ID']
def branchName = System.env['CI_COMMIT_REF_NAME']
if (jobId != null
        && branchName != null
        && branchName != 'master') {
    project.version = version + "-" + jobId
}

repositories {
    mavenLocal()
    maven {
        url nexus_group_url
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

spotless {
	java {
		target 'src/main/**/*.java', 'src/test/**/*.java'
		encoding 'UTF-8'
		lineEndings 'UNIX'
		eclipse().configFile 'shared/config/eclipse-formatter/eclipse-formatter-config.xml'
	}
}


dependencies {
    compile "cglib:cglib:3.2.7"
    compile "org.assertj:assertj-core:3.11.1"
    testCompile "cglib:cglib:3.2.7"
	testCompile "org.assertj:assertj-core:3.11.1"
	testCompile "junit:junit:4.12"
	testCompile "org.powermock:powermock-module-junit4:1.6.6"
	testCompile "org.powermock:powermock-api-mockito:1.6.6"

}

jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.88
            }
        }
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification

test {

    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    finalizedBy jacocoTestReport
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexus_releases_url) {
                authentication(userName: nexus_user_name, password: nexus_user_pwd)
            }
            pom.version = '${PROJECT_VERSION}'
            pom.artifactId = "resample"
            pom.groupId = "com.remondis"
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
    repositories {
        maven {
            url nexus_releases_url
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = nexus_user_name
                password = nexus_user_pwd
            }
        }
    }
}
